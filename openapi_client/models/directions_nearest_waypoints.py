# coding: utf-8

"""
    LocationIQ

    LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DirectionsNearestWaypoints(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nodes': 'list[float]',
        'distance': 'float',
        'location': 'list[float]',
        'name': 'str'
    }

    attribute_map = {
        'nodes': 'nodes',
        'distance': 'distance',
        'location': 'location',
        'name': 'name'
    }

    def __init__(self, nodes=None, distance=None, location=None, name=None, local_vars_configuration=None):  # noqa: E501
        """DirectionsNearestWaypoints - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nodes = None
        self._distance = None
        self._location = None
        self._name = None
        self.discriminator = None

        if nodes is not None:
            self.nodes = nodes
        if distance is not None:
            self.distance = distance
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name

    @property
    def nodes(self):
        """Gets the nodes of this DirectionsNearestWaypoints.  # noqa: E501


        :return: The nodes of this DirectionsNearestWaypoints.  # noqa: E501
        :rtype: list[float]
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DirectionsNearestWaypoints.


        :param nodes: The nodes of this DirectionsNearestWaypoints.  # noqa: E501
        :type: list[float]
        """

        self._nodes = nodes

    @property
    def distance(self):
        """Gets the distance of this DirectionsNearestWaypoints.  # noqa: E501


        :return: The distance of this DirectionsNearestWaypoints.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this DirectionsNearestWaypoints.


        :param distance: The distance of this DirectionsNearestWaypoints.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def location(self):
        """Gets the location of this DirectionsNearestWaypoints.  # noqa: E501


        :return: The location of this DirectionsNearestWaypoints.  # noqa: E501
        :rtype: list[float]
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DirectionsNearestWaypoints.


        :param location: The location of this DirectionsNearestWaypoints.  # noqa: E501
        :type: list[float]
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this DirectionsNearestWaypoints.  # noqa: E501


        :return: The name of this DirectionsNearestWaypoints.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DirectionsNearestWaypoints.


        :param name: The name of this DirectionsNearestWaypoints.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectionsNearestWaypoints):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DirectionsNearestWaypoints):
            return True

        return self.to_dict() != other.to_dict()
