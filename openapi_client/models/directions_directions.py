# coding: utf-8

"""
    LocationIQ

    LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DirectionsDirections(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'waypoints': 'list[object]',
        'routes': 'list[DirectionsDirectionsRoutes]'
    }

    attribute_map = {
        'code': 'code',
        'waypoints': 'waypoints',
        'routes': 'routes'
    }

    def __init__(self, code=None, waypoints=None, routes=None, local_vars_configuration=None):  # noqa: E501
        """DirectionsDirections - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._waypoints = None
        self._routes = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if waypoints is not None:
            self.waypoints = waypoints
        if routes is not None:
            self.routes = routes

    @property
    def code(self):
        """Gets the code of this DirectionsDirections.  # noqa: E501


        :return: The code of this DirectionsDirections.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DirectionsDirections.


        :param code: The code of this DirectionsDirections.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def waypoints(self):
        """Gets the waypoints of this DirectionsDirections.  # noqa: E501


        :return: The waypoints of this DirectionsDirections.  # noqa: E501
        :rtype: list[object]
        """
        return self._waypoints

    @waypoints.setter
    def waypoints(self, waypoints):
        """Sets the waypoints of this DirectionsDirections.


        :param waypoints: The waypoints of this DirectionsDirections.  # noqa: E501
        :type: list[object]
        """

        self._waypoints = waypoints

    @property
    def routes(self):
        """Gets the routes of this DirectionsDirections.  # noqa: E501


        :return: The routes of this DirectionsDirections.  # noqa: E501
        :rtype: list[DirectionsDirectionsRoutes]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this DirectionsDirections.


        :param routes: The routes of this DirectionsDirections.  # noqa: E501
        :type: list[DirectionsDirectionsRoutes]
        """

        self._routes = routes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectionsDirections):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DirectionsDirections):
            return True

        return self.to_dict() != other.to_dict()
