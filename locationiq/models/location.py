# coding: utf-8

"""
    LocationIQ

    LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.  # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from locationiq.configuration import Configuration


class Location(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance': 'float',
        'place_id': 'str',
        'licence': 'str',
        'osm_type': 'str',
        'osm_id': 'str',
        'boundingbox': 'list[str]',
        'lat': 'str',
        'lon': 'str',
        'display_name': 'str',
        '_class': 'str',
        'type': 'str',
        'importance': 'float',
        'address': 'Address',
        'namedetails': 'Namedetails',
        'matchquality': 'Matchquality'
    }

    attribute_map = {
        'distance': 'distance',
        'place_id': 'place_id',
        'licence': 'licence',
        'osm_type': 'osm_type',
        'osm_id': 'osm_id',
        'boundingbox': 'boundingbox',
        'lat': 'lat',
        'lon': 'lon',
        'display_name': 'display_name',
        '_class': 'class',
        'type': 'type',
        'importance': 'importance',
        'address': 'address',
        'namedetails': 'namedetails',
        'matchquality': 'matchquality'
    }

    def __init__(self, distance=None, place_id=None, licence=None, osm_type=None, osm_id=None, boundingbox=None, lat=None, lon=None, display_name=None, _class=None, type=None, importance=None, address=None, namedetails=None, matchquality=None, local_vars_configuration=None):  # noqa: E501
        """Location - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._distance = None
        self._place_id = None
        self._licence = None
        self._osm_type = None
        self._osm_id = None
        self._boundingbox = None
        self._lat = None
        self._lon = None
        self._display_name = None
        self.__class = None
        self._type = None
        self._importance = None
        self._address = None
        self._namedetails = None
        self._matchquality = None
        self.discriminator = None

        if distance is not None:
            self.distance = distance
        if place_id is not None:
            self.place_id = place_id
        if licence is not None:
            self.licence = licence
        if osm_type is not None:
            self.osm_type = osm_type
        if osm_id is not None:
            self.osm_id = osm_id
        if boundingbox is not None:
            self.boundingbox = boundingbox
        if lat is not None:
            self.lat = lat
        if lon is not None:
            self.lon = lon
        if display_name is not None:
            self.display_name = display_name
        if _class is not None:
            self._class = _class
        if type is not None:
            self.type = type
        if importance is not None:
            self.importance = importance
        if address is not None:
            self.address = address
        if namedetails is not None:
            self.namedetails = namedetails
        if matchquality is not None:
            self.matchquality = matchquality

    @property
    def distance(self):
        """Gets the distance of this Location.  # noqa: E501


        :return: The distance of this Location.  # noqa: E501
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Location.


        :param distance: The distance of this Location.  # noqa: E501
        :type: float
        """

        self._distance = distance

    @property
    def place_id(self):
        """Gets the place_id of this Location.  # noqa: E501


        :return: The place_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._place_id

    @place_id.setter
    def place_id(self, place_id):
        """Sets the place_id of this Location.


        :param place_id: The place_id of this Location.  # noqa: E501
        :type: str
        """

        self._place_id = place_id

    @property
    def licence(self):
        """Gets the licence of this Location.  # noqa: E501


        :return: The licence of this Location.  # noqa: E501
        :rtype: str
        """
        return self._licence

    @licence.setter
    def licence(self, licence):
        """Sets the licence of this Location.


        :param licence: The licence of this Location.  # noqa: E501
        :type: str
        """

        self._licence = licence

    @property
    def osm_type(self):
        """Gets the osm_type of this Location.  # noqa: E501


        :return: The osm_type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._osm_type

    @osm_type.setter
    def osm_type(self, osm_type):
        """Sets the osm_type of this Location.


        :param osm_type: The osm_type of this Location.  # noqa: E501
        :type: str
        """

        self._osm_type = osm_type

    @property
    def osm_id(self):
        """Gets the osm_id of this Location.  # noqa: E501


        :return: The osm_id of this Location.  # noqa: E501
        :rtype: str
        """
        return self._osm_id

    @osm_id.setter
    def osm_id(self, osm_id):
        """Sets the osm_id of this Location.


        :param osm_id: The osm_id of this Location.  # noqa: E501
        :type: str
        """

        self._osm_id = osm_id

    @property
    def boundingbox(self):
        """Gets the boundingbox of this Location.  # noqa: E501


        :return: The boundingbox of this Location.  # noqa: E501
        :rtype: list[str]
        """
        return self._boundingbox

    @boundingbox.setter
    def boundingbox(self, boundingbox):
        """Sets the boundingbox of this Location.


        :param boundingbox: The boundingbox of this Location.  # noqa: E501
        :type: list[str]
        """

        self._boundingbox = boundingbox

    @property
    def lat(self):
        """Gets the lat of this Location.  # noqa: E501


        :return: The lat of this Location.  # noqa: E501
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.


        :param lat: The lat of this Location.  # noqa: E501
        :type: str
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this Location.  # noqa: E501


        :return: The lon of this Location.  # noqa: E501
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Location.


        :param lon: The lon of this Location.  # noqa: E501
        :type: str
        """

        self._lon = lon

    @property
    def display_name(self):
        """Gets the display_name of this Location.  # noqa: E501


        :return: The display_name of this Location.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Location.


        :param display_name: The display_name of this Location.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def _class(self):
        """Gets the _class of this Location.  # noqa: E501


        :return: The _class of this Location.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Location.


        :param _class: The _class of this Location.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def type(self):
        """Gets the type of this Location.  # noqa: E501


        :return: The type of this Location.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Location.


        :param type: The type of this Location.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def importance(self):
        """Gets the importance of this Location.  # noqa: E501


        :return: The importance of this Location.  # noqa: E501
        :rtype: float
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this Location.


        :param importance: The importance of this Location.  # noqa: E501
        :type: float
        """

        self._importance = importance

    @property
    def address(self):
        """Gets the address of this Location.  # noqa: E501


        :return: The address of this Location.  # noqa: E501
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Location.


        :param address: The address of this Location.  # noqa: E501
        :type: Address
        """

        self._address = address

    @property
    def namedetails(self):
        """Gets the namedetails of this Location.  # noqa: E501


        :return: The namedetails of this Location.  # noqa: E501
        :rtype: Namedetails
        """
        return self._namedetails

    @namedetails.setter
    def namedetails(self, namedetails):
        """Sets the namedetails of this Location.


        :param namedetails: The namedetails of this Location.  # noqa: E501
        :type: Namedetails
        """

        self._namedetails = namedetails

    @property
    def matchquality(self):
        """Gets the matchquality of this Location.  # noqa: E501


        :return: The matchquality of this Location.  # noqa: E501
        :rtype: Matchquality
        """
        return self._matchquality

    @matchquality.setter
    def matchquality(self, matchquality):
        """Sets the matchquality of this Location.


        :param matchquality: The matchquality of this Location.  # noqa: E501
        :type: Matchquality
        """

        self._matchquality = matchquality

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Location):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Location):
            return True

        return self.to_dict() != other.to_dict()
